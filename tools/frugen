#!   /usr/bin/env   python
#-*-python-*-

# Copyright CERN, 2011, 2012
# Author: Matthieu Cattin <matthieu.cattin@cern.ch>
# Modified and broken by Alessandro Rubini, still learning python
# Copyright D-TACQ Solutions, 2013
# Modfied for D-TACQ purposes by Peter Milne peter.milne@d-tacq.com, still learning python.

# Import system modules
import sys
import getopt
import time
import datetime
import os

from libipmi.fmc_eeprom import *




"""
Creates a FRU binary file to be written into FMC EEPROM

"""



def fru_getopt(argv):
    return getopt.getopt(argv,"v:n:s:p:",["help", "nchan=", "mtype="])

def help():
    print("frugen [opts] PART SN1 .. [SNn]")
    print("generate SN1 .. SNn FRU files each of type PART")
    print("VALID PARTS ACQ420FMC- etc")
    print("opts: ")
    print("    --nchan NCHAN .. nchannels override")
    print("    --mtype MTYPE .. mtype override")


class FruGenerator:
    def __init__(self, name, part):
        # Defaults
        self.FRU_VENDOR = "D-TACQ Solutions"
        self.FRU_NAME = name
        self.FRU_SERIAL = "0001"
        self.FRU_PART = part 
        self.outroot = "fru"
        self.FMT = "X4xxx%04d"
        self.nchan = 0
        self.mtype = 0
        self.verbose = 0        
        

    def set_NchanMtypeFmt(self, nchan, mtype, fmt):
        self.nchan = nchan
        self.mtype = mtype
        self.FMT = fmt
        
        
    def setOpts(self, argv):
        # Override defaults with environment variables
        try:
            self.FRU_VENDOR = os.environ['FRU_VENDOR']
        except:
            pass
        try:
            self.FRU_NAME = os.environ['FRU_NAME']
        except:
            pass
        try:
            self.FRU_SERIAL = os.environ['FRU_SERIAL']
        except:
            pass
        try:
            self.FRU_PART = os.environ['FRU_PART']
        except:
            pass        
        if os.getenv("FRU_VERBOSE") is not None:
            self.verbose = 1

        # Override defaults with command line arguments
        try:
            opts, args = fru_getopt(argv)
        except getopt.GetoptError:
            print "fru-generator: wrong arguments"
            sys.exit(2)
        for opt, arg in opts:
            if opt == "--help":
                print "fru-generator: no help yet"
                sys.exit(1)
            if opt == '-v':
                self.FRU_VENDOR = arg
            if opt == '-n':
                self.FRU_NAME = arg
            if opt == '-s':
                self.FRU_SERIAL = arg
            if opt == '-p':
                self.FRU_PART = arg           
            if opt == "--nchan":
                self.nchan = arg
            if opt == "--mtype":
                self.mtype = arg

        #==================================================
        # Multirecords Area

        # output number, vnom, vmin, vmax, ripple, imin, imax
        dcload0 = DCLoadRecord(0, 1.8, 1.7, 1.9, 0.0, 0, 150) # VADJ
        dcload1 = DCLoadRecord(1, 3.3, 3.135, 3.465, 0.0, 0, 120) # P3V3
        dcload2 = DCLoadRecord(2, 12.0, 11.4, 12.6, 0.0, 0, 50)  # P12V
        self.dcload = [ dcload0, dcload1, dcload2 ]

        # output number, vnom, vmin, vmax, ripple, imin, imax
        dcout0 = DCOutputRecord(3, 0.0, 0.0, 0.0, 0.0, 0, 0) # VIO_B_M2C
        dcout1 = DCOutputRecord(4, 0.0, 0.0, 0.0, 0.0, 0, 0) # VREF_A_M2C
        dcout2 = DCOutputRecord(5, 0.0, 0.0, 0.0, 0.0, 0, 0) # VREF_B_M2C
        self.dcout = [ dcout0, dcout1, dcout2 ]

        # module size  : 0=single width, 1=double width
        # P1 size      : 0=LPC, 1=HPC
        # P2 size      : 0=LPC, 1=HPC, 3=not fitted
        # clock dir    : 0=M2C, 1=C2M
        # nb sig P1 A  : number
        # nb sig P1 B  : number
        # nb sig P2 A  : number
        # nb sig P2 B  : number
        # nb GBT P1    : number
        # nb GBT P2    : number
        # max TCK freq : frequency in MHz
        self.oem = OEMRecord(0, 0, 3, 0, 24, 0, 0, 0, 0, 0, 0)

    def write(self, uut):
        self.FRU_SERIAL = self.FMT % (int(uut))
        #==================================================
                # Calculate number of minutes since 0:00 1/1/96
        now_date = datetime.datetime.now()
        ref_date = datetime.datetime(1996, 1, 1)
        diff_date = now_date - ref_date
        total_seconds = diff_date.days * 86400 + diff_date.seconds
        current_date = int(total_seconds//60)
        mfg_date = current_date        
        #==================================================
        # Create Board Info Area
        # FRU field is used to store the date of generation of the eeprom content
        # This could be used later to determine if the content has to be udated (bug fix, ...)
        fru_part = "%s N=%s M=%s" % (self.FRU_PART, self.nchan, self.mtype)

        if self.verbose:
            print "VENDOR = " + self.FRU_VENDOR
            print "NAME = " + self.FRU_NAME
            print "SERIAL = " + self.FRU_SERIAL
            print "PART = " + self.FRU_PART
            print "OUTPUT = " + self.FRU_OUTPUT        
        fru = "%s" % now_date
        self.bia = BoardInfoArea(mfg_date, self.FRU_VENDOR, self.FRU_NAME, \
                                 self.FRU_SERIAL, fru_part, fru)

        #==================================================
        # Write eeprom content to a binary file
        file = "%s/%s.fru" % (self.outroot, self.FRU_SERIAL)
        print "Generating %s %s" % (self.FRU_NAME, file)
        ipmi_open_file(file)        
        ipmi_set(self.bia, self.dcload, self.dcout, self.oem)
        ipmi_write()
        ipmi_close_file()


# generates a FRU with zero rails requirement
class FruGeneratorElf(FruGenerator):
    def __init__(self, name, part):
        FruGenerator.__init__(self, name, part)        
        dcload0 = DCLoadRecord(0, 0.0, 0.0, 0.0, 0.0, 0, 0) # VADJ
        dcload1 = DCLoadRecord(1, 0.0, 0.0, 0.0, 0.0, 0, 0) # P3V3
        dcload2 = DCLoadRecord(2, 0.0, 0.0, 0.0, 0.0, 0, 0)  # P12V
        self.dcload = [dcload0, dcload1, dcload2] 
        # module size  : 0=single width, 1=double width
        # P1 size      : 0=LPC, 1=HPC
        # P2 size      : 0=LPC, 1=HPC, 3=not fitted
        # clock dir    : 0=M2C, 1=C2M
        # nb sig P1 A  : number
        # nb sig P1 B  : number
        # nb sig P2 A  : number
        # nb sig P2 B  : number
        # nb GBT P1    : number
        # nb GBT P2    : number
        # max TCK freq : frequency in MHz
        self.oem = OEMRecord(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)            


class FruGeneratorFmc(FruGenerator):
    def __init__(self, name, part):
        FruGenerator.__init__(self, name, part)    
        # possible general common FMC things here.


# product specific classes:
# put product specific defaults, [nchan, mtype but also dcloadX when ready]



class ACQ420FMC(FruGeneratorFmc):
    def __init__(self, name, part):
        FruGeneratorFmc.__init__(self, name, part)
	if part.split('-')[2] == "2000" :
		print "generating special module type A1"
        	self.set_NchanMtypeFmt( 4, "A1", "F4201%04d")
	else:
	        self.set_NchanMtypeFmt( 4, "01", "F4201%04d")

class ACQ420ELF(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
	if part.split('-')[2] == "2000" :
		print "generating special module type A1"
        	self.set_NchanMtypeFmt( 4, "A1", "E4201%04d")
	else:
	        self.set_NchanMtypeFmt( 4, "01", "E4201%04d")

class ACQ424ELF(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
        self.set_NchanMtypeFmt( 32, "04", "E4241%04d")
        
class ACQ425ELF(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
        if part.split('-')[2] == "2000" :
                print "generating special module type A5"
                self.set_NchanMtypeFmt( 16, "A5", "E4251%04d")
        else:
                self.set_NchanMtypeFmt( 16, "05", "E4251%04d")

class ACQ430FMC(FruGeneratorFmc):
    def __init__(self, name, part):
        FruGeneratorFmc.__init__(self, name, part)
	# Rev A
        #self.set_NchanMtypeFmt( 8, "03", "F4301%04d")    
	# Rev B
	if part.split('-')[1] == "4" :
        	self.set_NchanMtypeFmt( 4, "03", "F4301%04d") 
        else:
        	self.set_NchanMtypeFmt( 8, "03", "F4301%04d")         

class ACQ430ELF(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
	# Rev A
        #self.set_NchanMtypeFmt( 8, "03", "E4301%04d")   
	# Rev B
	if part.split('-')[1] == "4" :
        	self.set_NchanMtypeFmt( 4, "03", "E4301%04d") 
        else:
        	self.set_NchanMtypeFmt( 8, "03", "E4301%04d")  

class ACQ435ELF(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
        self.set_NchanMtypeFmt(32, "02", "E4351%04d")     

class ACQ437ELF(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
        self.set_NchanMtypeFmt(16, "06", "E4371%04d")      
 
class ACQ480FMC(FruGeneratorFmc):
    def __init__(self, name, part):
        FruGeneratorFmc.__init__(self, name, part)
        self.set_NchanMtypeFmt( 8, "08", "F4801%04d")
 
class ACQ480ELF(FruGeneratorFmc):
     def __init__(self, name, part):
		FruGeneratorFmc.__init__(self, name, part)
	#if part.split('-')[2] == "1V":
	#	self.set_NchanMtypeFmt( 8, "08", "E4801%04d")
	#elif part.split('-')[2] == "OEM":
	#	self.set_NchanMtypeFmt( 8, "08", "E4801%04d")
	#else: 
		self.set_NchanMtypeFmt( 8, "08", "E4801%04d")

class AO420FMC(FruGeneratorFmc):
    def __init__(self, name, part):
        FruGeneratorFmc.__init__(self, name, part)
        self.set_NchanMtypeFmt( 4, "40", "F4200%04d")

class AO420ELF(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
        self.set_NchanMtypeFmt( 4, "40", "E4200%04d")        

class AO421ELF(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
        self.set_NchanMtypeFmt(40, "ff", "E4210%04d")
 
class AO424ELF(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
        self.set_NchanMtypeFmt(32, "41", "E4240%04d")
      
class BOLO8BLF(FruGeneratorElf):
    def __init__(self, name, part):
	FruGeneratorElf.__init__(self, name, part)
	# Rev A	
	#self.set_NchanMtypeFmt( 8, "60", "BE401%04d")
	# Rev B	
	self.set_NchanMtypeFmt( 8, "64", "BE401%04d")

class DIO432FMC(FruGeneratorFmc):
    def __init__(self, name, part):
	FruGeneratorFmc.__init__(self, name, part)
	self.set_NchanMtypeFmt( 32, "61", "F4322%04d")

class DIO432ELF(FruGeneratorElf):
    def __init__(self, name, part):
	FruGeneratorElf.__init__(self, name, part)
	self.set_NchanMtypeFmt( 32, "61", "E4322%04d")

  
class DIO432PMOD(FruGeneratorElf):
    def __init__(self, name, part):
       FruGeneratorElf.__init__(self, name, part)
       self.set_NchanMtypeFmt( 32, "62", "P4322%04d")

  
class MTCA(FruGeneratorElf):
    def __init__(self, name, part):
       FruGeneratorElf.__init__(self, "ACQ400-MTCA-RTM-2", "ACQ400-MTCA-RTM-2")
       self.set_NchanMtypeFmt( 0, "FC", "CM402%04d")

 
class PMODADC1(FruGeneratorElf):
    def __init__(self, name, part):
	FruGeneratorElf.__init__(self, name, part)
	self.set_NchanMtypeFmt( 2, "63", "P4401%04d")
	self.FRU_VENDOR = "DIGILENT"

class MGT482(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
	if part.split('-')[1] == "SFP4" :
        	self.set_NchanMtypeFmt( 4, "90", "AM482%04d")
        else:
        	self.set_NchanMtypeFmt( 8, "90", "AM482%04d")

class ACQ400TEST(FruGeneratorElf):
    def __init__(self, name, part):
        FruGeneratorElf.__init__(self, name, part)
	if part.split('-')[1] == "ELF" :
        	self.set_NchanMtypeFmt( 0, "FE", "E4009%04d")
        else:
                self.set_NchanMtypeFmt( 0, "FD", "F4009%04d")

# These are named after their function and given separate MODULE IDs to ensure the correct FPGA is loaded.			 

#class BISCUIT_DIO(FruGeneratorElf):
#    def __init__(self, name, part):
#       FruGeneratorElf.__init__(self, "DIO Biscuit", "ACQ1002S-BP-1-DIO")
#       self.set_NchanMtypeFmt( 4, "68", "AB411%04d")
#			 
#
#class BISCUIT_DIO_USB(FruGeneratorElf):
#    def __init__(self, name, part):
#       FruGeneratorElf.__init__(self, "DIO Biscuit", "ACQ1002S-BP-1-DIO-USB")
#       self.set_NchanMtypeFmt( 4, "68", "AB411%04d")
	  
class BISCUIT_V2F(FruGeneratorElf):
    def __init__(self, name, part):
       FruGeneratorElf.__init__(self, "V2F Biscuit", "ACQ1002S-BP-1-DIO")
       self.set_NchanMtypeFmt( 4, "67", "AB411%04d")

class BISCUIT_V2F_USB(FruGeneratorElf):
    def __init__(self, name, part):
       FruGeneratorElf.__init__(self, "V2F Biscuit", "ACQ1002S-BP-1-DIO-USB")
       self.set_NchanMtypeFmt( 4, "67", "AB411%04d")

class PIG_CELF(FruGeneratorElf):
    def __init__(self, name, part):
       FruGeneratorElf.__init__(self, "PIG-CELF", "PIG-CELF")
       self.set_NchanMtypeFmt( 8, "68", "AP401%04d")

class RAD_CELF(FruGeneratorElf):
    def __init__(self, name, part):
       FruGeneratorElf.__init__(self, "RAD-CELF", "RAD-CELF")
       self.set_NchanMtypeFmt( 0, "69", "AP402%04d")

class UWASH_MASTER(FruGeneratorElf):
    def __init__(self, name, part):
       FruGeneratorElf.__init__(self, "UWASH-MASTER", "UWASH-MASTER")
       self.set_NchanMtypeFmt( 6, "FB", "UW_MSTR_%04d")

   
fundict = {
    'ACQ420FMC' : ACQ420FMC,
    'ACQ420ELF' : ACQ420ELF,
    'ACQ425ELF' : ACQ425ELF,
    'ACQ424ELF' : ACQ424ELF,
    'ACQ430FMC' : ACQ430FMC,
    'ACQ430ELF' : ACQ430ELF,
    'ACQ435ELF' : ACQ435ELF,
    'ACQ437ELF' : ACQ437ELF,
    'ACQ480FMC' : ACQ480FMC,    
    'ACQ480ELF' : ACQ480ELF,    
    'AO420FMC'  : AO420FMC,
    'AO420ELF'  : AO420ELF,
    'AO421ELF'  : AO421ELF,
    'AO424ELF'  : AO424ELF,
    'BOLO8BLF'  : BOLO8BLF,
    'DIO432FMC' : DIO432FMC,
    'DIO432ELF' : DIO432ELF,
    'DIO432PMOD' : DIO432PMOD,
    'PMODADC1' : PMODADC1,
    'MGT482' : MGT482,
    'ACQ400TEST' : ACQ400TEST,
    'MTCA' : MTCA,
#    'BISCUIT_DIO' : BISCUIT_DIO,
#    'BISCUIT_DIO_USB' : BISCUIT_DIO_USB,
    'BISCUIT_V2F' : BISCUIT_V2F,
    'BISCUIT_V2F_USB' : BISCUIT_V2F_USB,
    'PIG_CELF' : PIG_CELF,
    'RAD_CELF' : RAD_CELF,
    'UWASH_MASTER' : UWASH_MASTER,
}  

if __name__ == '__main__' :

    try:
        opts, args = fru_getopt(sys.argv[1:])                
    except getopt.GetoptError:
        print "fru-generator: wrong arguments"
        sys.exit(2) 
    for opt, arg in opts:        
        if opt == "--help":
            help()
            sys.exit(1)        

    print opts
    print args

    try:
        btype = args[0].split('-')[0]
    except IndexError:
        print("frugen: must specify part")
        sys.exit(1)
    
    try:    
        fg = fundict[btype](btype, args[0])
    except KeyError:
        print "ERROR: product type %s not found" % (btype)
        print "available products are:"
        for key in fundict.keys():
            print key 
        sys.exit(1)            
    
    fg.setOpts(sys.argv[1:])    
    
    for uut in args[1:]:        
        fg.write(uut)
